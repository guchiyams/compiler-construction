#ifndef STATETABLE
#define STATETABLE

#include <unordered_map>
#include <vector>

using std::unordered_map;
using std::vector;

// STATE INDICES:
//      1  = STARTING STATE
//      2  = IN IDENTIFIER
//      3  = END IDENTIFIER - ACCEPTING STATE -> BACK UP
//      4  = IN WHILE KEYWORD
//      5  = IN WHILE_H
//      6  = IN WHILE_I
//      7  = IN WHILE_L
//      8  = END WHILE KEYWORD - ACCEPTING STATE
//      9  = IN NUMBER
//      10 = END NUMBER - ACCEPTING STATE -> BACK UP
//      11 = END OPERATOR - ACCEPTING STATE
//      12 = END SEPARATOR - ACCEPTING STATE
//      13 = INVALID - THROW EXCEPTION

// DESIRED TABLE:
//                 0     1     2     3     4     5     6     7     8     9     10    11    12    13    14    15  
// ______________________________________________________________________________________________________________
//  CURR_STATE  | 'w' | 'h' | 'i' | 'l' | 'e' | 'f' | 'a' | 'r' | 'u' | 'p' | DIG | '<' | '=' | '(' | ')' | ' ' |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      1       |  4  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  9  |  11 |  12 |  13 |  14 |  1  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      2       |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  3  |  3  |  3  |  3  |  3  |  3  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//     _3_      |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |   -> BACK UP
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      4       |  2  |  5  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  3  |  3  |  3  |  3  |  3  |  3  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      5       |  2  |  2  |  6  |  2  |  2  |  2  |  2  |  2  |  2  |  2  |  3  |  3  |  3  |  3  |  3  |  3  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      6       |  2  |  2  |  2  |  7  |  2  |  2  |  2  |  2  |  2  |  2  |  3  |  3  |  3  |  3  |  3  |  3  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      7       |  2  |  2  |  2  |  2  |  8  |  2  |  2  |  2  |  2  |  2  |  3  |  3  |  3  |  3  |  3  |  3  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//     _8_      |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      9       |  13 |  13 |  13 |  13 |  13 |  13 |  13 |  13 |  13 |  13 |  9  |  10 |  10 |  13 |  13 |  10 |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|  -> BACK UP
//     _10_     |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//     _11_     |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//     _12_     |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//      13      |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
// _____________|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
//

// CHAR TO COLUMN - map char to column number
// COLUMNS: [ 'w', 'h', 'i', 'l', 'e', 'f', 'a', 'r', 'u', 'p', DIG, '<', '=', '(', ')', ' ']
unordered_map<char, int> CHAR_TO_COL {
    {'w', 0},
    {'h', 1},
    {'i', 2},
    {'l', 3},
    {'e', 4},
    {'f', 5},
    {'a', 6},
    {'r', 7},
    {'u', 8},
    {'p', 9},
    {'0', 10},
    {'1', 10},
    {'2', 10},
    {'3', 10},
    {'4', 10},
    {'5', 10},
    {'6', 10},
    {'7', 10},
    {'8', 10},
    {'9', 10},
    {'<', 11},
    {'=', 12},
    {'(', 13},
    {')', 14},
    {' ', 15}
};

// TRANSITION TABLE - create above desired table
const int TRANSITION_TABLE[][13] = {
    { 4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  9, 11, 12, 13, 14,  1 },      // STATE_01
    { 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3 },      // STATE_02
    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },      // STATE_03 -> ACCEPTING STATE -> BACK UP
    { 2,  5,  2,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3 },      // STATE_04
    { 2,  2,  6,  2,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3 },      // STATE_05
    { 2,  2,  2,  7,  2,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3 },      // STATE_06
    { 2,  2,  2,  2,  8,  2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3 },      // STATE_07
    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },      // STATE_08 -> ACCEPTING STATE
    {13, 13, 13, 13, 13, 13, 13, 13, 13, 13,  9, 10, 10, 13, 13, 10 },      // STATE_09
    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },      // STATE_10 -> ACCEPTING STATE -> BACK UP
    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },      // STATE_11 -> ACCEPTING STATE
    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },      // STATE_12 -> ACCEPTING STATE
    { 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1 },      // STATE_13 -> ACCEPTING STATE -> THROW EXCEPTION
};

#endif // STATETABLE