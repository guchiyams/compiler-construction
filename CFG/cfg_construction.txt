R1. <Rat23S> ::= <Opt Function Definitions> %% <Opt Declaration List> <Statement List>
R2. <Opt Function Definitions> ::= <Function Definitions> | <Empty>
R3. <Function Definitions> ::= <Function> | <Function> <Function Definitions>
R4. <Function> ::= function <Identifier> [ <Opt Parameter List> ] <Opt Declaration List> <Body>
R5. <Opt Parameter List> ::= <Parameter List> | <Empty>
R6. <Parameter List> ::= <Parameter> | <Parameter> , <Parameter List>
R7. <Parameter> ::= <IDs > : <Qualifier>
R8. <Qualifier> ::= int | boolean | real
R9. <Body> ::= { < Statement List> }
R10. <Opt Declaration List> ::= <Declaration List> | <Empty>
R11. <Declaration List> := <Declaration> ; | <Declaration> ; <Declaration List>
R12. <Declaration> ::= <Qualifier > <IDs>
R13. <IDs> ::= <Identifier> | <Identifier>, <IDs>
R14. <Statement List> ::= <Statement> | <Statement> <Statement List>
R15. <Statement> ::= <Compound> | <Assign> | <If> | <Return> | <Print> | <Scan> | <While>
R16. <Compound> ::= { <Statement List> }
R17. <Assign> ::= <Identifier> = <Expression> ;
R18. <If> ::= if ( <Condition> ) <Statement> endif | if ( <Condition> ) <Statement> else <Statement> endif
R19. <Return> ::= return ; | return <Expression> ;
R20. <Print> ::= put ( <Expression>);
R21. <Scan> ::= get ( <IDs> );
R22. <While> ::= while ( <Condition> ) <Statement>
R23. <Condition> ::= <Expression> <Relop> <Expression>
R24. <Relop> ::= == | ^= | > | < | => | =<
R25. <Expression> ::= <Expression> + <Term> | <Expression> - <Term> | <Term>
R26. <Term> ::= <Term> * <Factor> | <Term> / <Factor> | <Factor>
R27. <Factor> ::= - <Primary> | <Primary>
R28. <Primary> ::= <Identifier> | <Integer> | <Identifier> ( <IDs> ) | ( <Expression> ) | <Real> | true | false
R29. <Empty> ::=


R1  => R2 %% R10 R14
R2  => R3 | null
R3  => R4 | R4 R3
R4  => function <identifier> [ R5 ] R10 R9
R5  => R6 | null
R6  => R7 | R7, R6
R7  => R13 : R8
R8  => int | boolean | real
R9  => { R14 }
R10 => R11 | null
R11 => R12 ; | R12 ; R11
R12 => R8 R13
R13 => <identifier> | <identifier>, R13
R14 => R15 | R15 R14
R15 => R16 | R17 | R18 | R19 | R20 | R21 | R22
R16 => { R14 }
R17 => <identifier> = R25
R18 => if ( R23 ) R15 endif | if ( R23 ) R15 else R15 endif
R19 => return ; | return R25 ;
R20 => put ( R25 ) ;
R21 => get ( R13 ) ;
R22 => while ( R23 ) R15
R23 => R25 R24 R25
R24 => == | ^= | > | < | => | =<
R25 => R25 + R26 | R25 - R26 | R26
R26 => R26 * R27 | R26 / R27 | R27
R27 => - R28 | R28
R28 => <identifier> | <integer> | <identifier> ( R13 ) | ( R25 ) | <real> | true | false
R29 => 


=== LEFT RECURSION REMOVED ===
R1   =>  R2 %% R10 R14
R2   =>  R3 | null
R3   =>  R4 | R4 R3
R4   =>  function <identifier> [ R5 ] R10 R9
R5   =>  R6 | null
R6   =>  R7 | R7, R6
R7   =>  R13 : R8
R8   =>  int | boolean | real
R9   =>  { R14 }
R10  =>  R11 | null
R11  =>  R12 ; | R12 ; R11
R12  =>  R8 R13
R13  =>  <identifier> | <identifier>, R13
R14  =>  R15 | R15 R14
R15  =>  R16 | R17 | R18 | R19 | R20 | R21 | R22
R16  =>  { R14 }
R17  =>  <identifier> = R25
R18  =>  if ( R23 ) R15 endif | if ( R23 ) R15 else R15 endif
R19  =>  return ; | return R25 ;
R20  =>  put ( R25 ) ;
R21  =>  get ( R13 ) ;
R22  =>  while ( R23 ) R15
R23  =>  R25 R24 R25
R24  =>  == | ^= | > | < | => | =<
R25  =>  R26 R25'
R25' =>  + R26 R25' | - R26 R25' | null
R26  =>  R27 R26'
R26' =>  * R27 R26' | / R27 R26' | null
R27  =>  - R28 | R28
R28  =>  <identifier> | <integer> | <identifier> ( R13 ) | ( R25 ) | <real> | true | false
R29  =>  





function convert$ [fahr:int]
{
    return 5 * (fahr -32) / 9;
}

%%
int    low,  high, step$;      ! declarations !

get (low, high, step$);
while (low  <  high )  
{  put (low);
    put (convert$ (low));
    low =  low  +  step$;
} 
