parsing input...

current stack: "<Rat23S> $ "
token: SEPARATOR ,      lexeme: %
<Rat23S> => <Opt Function Definitions> % % <Opt Declaration List> <Statement List> 

current stack: "<Opt Function Definitions> % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: %
<Opt Function Definitions> => <Empty> 

current stack: "<Empty> % % <Opt Declaration List> <Statement List> $ "
current stack: "% % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: %

current stack: "% <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: %

current stack: "<Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Opt Declaration List> => <Declaration List> 

current stack: "<Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Declaration List> => <Declaration> ; <Declaration List>' 

current stack: "<Declaration> ; <Declaration List>' <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Declaration> => <Qualifier> <IDs> 

current stack: "<Qualifier> <IDs> ; <Declaration List>' <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Qualifier> => int 

current stack: "int <IDs> ; <Declaration List>' <Statement List> $ "
token: KEYWORD ,      lexeme: int

current stack: "<IDs> ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: low
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: low

current stack: "<IDs>' ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

current stack: ", <IDs> ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,

current stack: "<IDs> ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: high
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: high

current stack: "<IDs>' ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

current stack: ", <IDs> ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,

current stack: "<IDs> ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: step$
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: step$

current stack: "<IDs>' ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ;
<IDs>' => <Empty> 

current stack: "<Empty> ; <Declaration List>' <Statement List> $ "
current stack: "; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ;

current stack: "<Declaration List>' <Statement List> $ "
token: KEYWORD ,      lexeme: get
<Declaration List>' => <Empty> 

current stack: "<Empty> <Statement List> $ "
current stack: "<Statement List> $ "
token: KEYWORD ,      lexeme: get
<Statement List> => <Statement> <Statement List>' 

current stack: "<Statement> <Statement List>' $ "
token: KEYWORD ,      lexeme: get
<Statement> => <Scan> 

current stack: "<Scan> <Statement List>' $ "
token: KEYWORD ,      lexeme: get
<Scan> => get ( <IDs> ) ; 

current stack: "get ( <IDs> ) ; <Statement List>' $ "
token: KEYWORD ,      lexeme: get

current stack: "( <IDs> ) ; <Statement List>' $ "
token: SEPARATOR ,      lexeme: (

current stack: "<IDs> ) ; <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ) ; <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low

current stack: "<IDs>' ) ; <Statement List>' $ "
token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

current stack: ", <IDs> ) ; <Statement List>' $ "
token: SEPARATOR ,      lexeme: ,

current stack: "<IDs> ) ; <Statement List>' $ "
token: IDENTIFIER ,      lexeme: high
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ) ; <Statement List>' $ "
token: IDENTIFIER ,      lexeme: high

current stack: "<IDs>' ) ; <Statement List>' $ "
token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

current stack: ", <IDs> ) ; <Statement List>' $ "
token: SEPARATOR ,      lexeme: ,

current stack: "<IDs> ) ; <Statement List>' $ "
token: IDENTIFIER ,      lexeme: step$
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ) ; <Statement List>' $ "
token: IDENTIFIER ,      lexeme: step$

current stack: "<IDs>' ) ; <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<IDs>' => <Empty> 

current stack: "<Empty> ) ; <Statement List>' $ "
current stack: ") ; <Statement List>' $ "
token: SEPARATOR ,      lexeme: )

current stack: "; <Statement List>' $ "
token: SEPARATOR ,      lexeme: ;

current stack: "<Statement List>' $ "
token: KEYWORD ,      lexeme: while
<Statement List>' => <Statement List> 

current stack: "<Statement List> $ "
token: KEYWORD ,      lexeme: while
<Statement List> => <Statement> <Statement List>' 

current stack: "<Statement> <Statement List>' $ "
token: KEYWORD ,      lexeme: while
<Statement> => <While> 

current stack: "<While> <Statement List>' $ "
token: KEYWORD ,      lexeme: while
<While> => while ( <Condition> ) <Statement> 

current stack: "while ( <Condition> ) <Statement> <Statement List>' $ "
token: KEYWORD ,      lexeme: while

current stack: "( <Condition> ) <Statement> <Statement List>' $ "
token: SEPARATOR ,      lexeme: (

current stack: "<Condition> ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Condition> => <Expression> <Relop> <Expression> 

current stack: "<Expression> <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Expression> => <Term> <Expression>' 

current stack: "<Term> <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Primary> => IDENTIFIER <Primary>' 

current stack: "IDENTIFIER <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low

current stack: "<Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: OPERATOR ,      lexeme: <
<Primary>' => <Empty> 

current stack: "<Empty> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
current stack: "<Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: OPERATOR ,      lexeme: <
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
current stack: "<Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ "
token: OPERATOR ,      lexeme: <
<Expression>' => <Empty> 

current stack: "<Empty> <Relop> <Expression> ) <Statement> <Statement List>' $ "
current stack: "<Relop> <Expression> ) <Statement> <Statement List>' $ "
token: OPERATOR ,      lexeme: <
<Relop> => < 

current stack: "< <Expression> ) <Statement> <Statement List>' $ "
token: OPERATOR ,      lexeme: <

current stack: "<Expression> ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: high
<Expression> => <Term> <Expression>' 

current stack: "<Term> <Expression>' ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: high
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: high
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: high
<Primary> => IDENTIFIER <Primary>' 

current stack: "IDENTIFIER <Primary>' <Term>' <Expression>' ) <Statement> <Statement List>' $ "
token: IDENTIFIER ,      lexeme: high

current stack: "<Primary>' <Term>' <Expression>' ) <Statement> <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Primary>' => <Empty> 

current stack: "<Empty> <Term>' <Expression>' ) <Statement> <Statement List>' $ "
current stack: "<Term>' <Expression>' ) <Statement> <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ) <Statement> <Statement List>' $ "
current stack: "<Expression>' ) <Statement> <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Expression>' => <Empty> 

current stack: "<Empty> ) <Statement> <Statement List>' $ "
current stack: ") <Statement> <Statement List>' $ "
token: SEPARATOR ,      lexeme: )

current stack: "<Statement> <Statement List>' $ "
token: SEPARATOR ,      lexeme: {
<Statement> => <Compound> 

current stack: "<Compound> <Statement List>' $ "
token: SEPARATOR ,      lexeme: {
<Compound> => { <Statement List> } 

current stack: "{ <Statement List> } <Statement List>' $ "
token: SEPARATOR ,      lexeme: {

current stack: "<Statement List> } <Statement List>' $ "
token: KEYWORD ,      lexeme: put
<Statement List> => <Statement> <Statement List>' 

current stack: "<Statement> <Statement List>' } <Statement List>' $ "
token: KEYWORD ,      lexeme: put
<Statement> => <Print> 

current stack: "<Print> <Statement List>' } <Statement List>' $ "
token: KEYWORD ,      lexeme: put
<Print> => put ( <Expression> ) ; 

current stack: "put ( <Expression> ) ; <Statement List>' } <Statement List>' $ "
token: KEYWORD ,      lexeme: put

current stack: "( <Expression> ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: (

current stack: "<Expression> ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Expression> => <Term> <Expression>' 

current stack: "<Term> <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Primary> => IDENTIFIER <Primary>' 

current stack: "IDENTIFIER <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low

current stack: "<Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Primary>' => <Empty> 

current stack: "<Empty> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
current stack: "<Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ) ; <Statement List>' } <Statement List>' $ "
current stack: "<Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Expression>' => <Empty> 

current stack: "<Empty> ) ; <Statement List>' } <Statement List>' $ "
current stack: ") ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )

current stack: "; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: ;

current stack: "<Statement List>' } <Statement List>' $ "
token: KEYWORD ,      lexeme: put
<Statement List>' => <Statement List> 

current stack: "<Statement List> } <Statement List>' $ "
token: KEYWORD ,      lexeme: put
<Statement List> => <Statement> <Statement List>' 

current stack: "<Statement> <Statement List>' } <Statement List>' $ "
token: KEYWORD ,      lexeme: put
<Statement> => <Print> 

current stack: "<Print> <Statement List>' } <Statement List>' $ "
token: KEYWORD ,      lexeme: put
<Print> => put ( <Expression> ) ; 

current stack: "put ( <Expression> ) ; <Statement List>' } <Statement List>' $ "
token: KEYWORD ,      lexeme: put

current stack: "( <Expression> ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: (

current stack: "<Expression> ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: convert$
<Expression> => <Term> <Expression>' 

current stack: "<Term> <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: convert$
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: convert$
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: convert$
<Primary> => IDENTIFIER <Primary>' 

current stack: "IDENTIFIER <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: convert$

current stack: "<Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: (
<Primary>' => ( <IDs> ) 

current stack: "( <IDs> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: (

current stack: "<IDs> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low

current stack: "<IDs>' ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<IDs>' => <Empty> 

current stack: "<Empty> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
current stack: ") <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )

current stack: "<Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ) ; <Statement List>' } <Statement List>' $ "
current stack: "<Expression>' ) ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )
<Expression>' => <Empty> 

current stack: "<Empty> ) ; <Statement List>' } <Statement List>' $ "
current stack: ") ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: )

current stack: "; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: ;

current stack: "<Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Statement List>' => <Statement List> 

current stack: "<Statement List> } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Statement List> => <Statement> <Statement List>' 

current stack: "<Statement> <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Statement> => <Assign> 

current stack: "<Assign> <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Assign> => IDENTIFIER = <Expression> ; 

current stack: "IDENTIFIER = <Expression> ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low

current stack: "= <Expression> ; <Statement List>' } <Statement List>' $ "
token: OPERATOR ,      lexeme: =

current stack: "<Expression> ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Expression> => <Term> <Expression>' 

current stack: "<Term> <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low
<Primary> => IDENTIFIER <Primary>' 

current stack: "IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: low

current stack: "<Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: OPERATOR ,      lexeme: +
<Primary>' => <Empty> 

current stack: "<Empty> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
current stack: "<Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: OPERATOR ,      lexeme: +
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ; <Statement List>' } <Statement List>' $ "
current stack: "<Expression>' ; <Statement List>' } <Statement List>' $ "
token: OPERATOR ,      lexeme: +
<Expression>' => + <Term> <Expression>' 

current stack: "+ <Term> <Expression>' ; <Statement List>' } <Statement List>' $ "
token: OPERATOR ,      lexeme: +

current stack: "<Term> <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: step$
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: step$
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: step$
<Primary> => IDENTIFIER <Primary>' 

current stack: "IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: IDENTIFIER ,      lexeme: step$

current stack: "<Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: ;
<Primary>' => <Empty> 

current stack: "<Empty> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
current stack: "<Term>' <Expression>' ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: ;
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ; <Statement List>' } <Statement List>' $ "
current stack: "<Expression>' ; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: ;
<Expression>' => <Empty> 

current stack: "<Empty> ; <Statement List>' } <Statement List>' $ "
current stack: "; <Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: ;

current stack: "<Statement List>' } <Statement List>' $ "
token: SEPARATOR ,      lexeme: }
<Statement List>' => <Empty> 

current stack: "<Empty> } <Statement List>' $ "
current stack: "} <Statement List>' $ "
token: SEPARATOR ,      lexeme: }

current stack: "<Statement List>' $ "
token: END_INPUT ,      lexeme: $
<Statement List>' => <Empty> 

current stack: "<Empty> $ "
current stack: "$ "
token: END_INPUT ,      lexeme: $

successfully parsed input. input is valid.
