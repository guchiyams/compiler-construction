parsing input...

current stack: "<Rat23S> $ "
token: KEYWORD ,      lexeme: function
<Rat23S> => <Opt Function Definitions> % % <Opt Declaration List> <Statement List> 

current stack: "<Opt Function Definitions> % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: function
<Opt Function Definitions> => <Function Definitions> 

current stack: "<Function Definitions> % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: function
<Function Definitions> => <Function> <Function Definitions>' 

current stack: "<Function> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: function
<Function> => function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> 

current stack: "function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: function

current stack: "IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: convert$

current stack: "[ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: [

current stack: "<Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<Opt Parameter List> => <Parameter List> 

current stack: "<Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<Parameter List> => <Parameter> <Parameter List>' 

current stack: "<Parameter> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<Parameter> => <IDs> : <Qualifier> 

current stack: "<IDs> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr

current stack: "<IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: :
<IDs>' => <Empty> 

current stack: "<Empty> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: ": <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: :

current stack: "<Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Qualifier> => int 

current stack: "int <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: int

current stack: "<Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: ]
<Parameter List>' => <Empty> 

current stack: "<Empty> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: ]

current stack: "<Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: {
<Opt Declaration List> => <Empty> 

current stack: "<Empty> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "<Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: {
<Body> => { <Statement List> } 

current stack: "{ <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: {

current stack: "<Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: return
<Statement List> => <Statement> <Statement List>' 

current stack: "<Statement> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: return
<Statement> => <Return> 

current stack: "<Return> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: return
<Return> => return <Return>' 

current stack: "return <Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: return

current stack: "<Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 5
<Return>' => <Expression> ; 

current stack: "<Expression> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 5
<Expression> => <Term> <Expression>' 

current stack: "<Term> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 5
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 5
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 5
<Primary> => INTEGER 

current stack: "INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 5

current stack: "<Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: *
<Term>' => * <Factor> <Term>' 

current stack: "* <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: *

current stack: "<Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: (
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: (
<Primary> => ( <Expression> ) 

current stack: "( <Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: (

current stack: "<Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<Expression> => <Term> <Expression>' 

current stack: "<Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr
<Primary> => IDENTIFIER <Primary>' 

current stack: "IDENTIFIER <Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: IDENTIFIER ,      lexeme: fahr

current stack: "<Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: -
<Primary>' => <Empty> 

current stack: "<Empty> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "<Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: -
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "<Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: -
<Expression>' => - <Term> <Expression>' 

current stack: "- <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: -

current stack: "<Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 32
<Term> => <Factor> <Term>' 

current stack: "<Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 32
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 32
<Primary> => INTEGER 

current stack: "INTEGER <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 32

current stack: "<Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: )
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "<Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: )
<Expression>' => <Empty> 

current stack: "<Empty> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: ") <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: )

current stack: "<Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: /
<Term>' => / <Factor> <Term>' 

current stack: "/ <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: OPERATOR ,      lexeme: /

current stack: "<Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 9
<Factor> => <Primary> 

current stack: "<Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 9
<Primary> => INTEGER 

current stack: "INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: INTEGER ,      lexeme: 9

current stack: "<Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: ;
<Term>' => <Empty> 

current stack: "<Empty> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "<Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: ;
<Expression>' => <Empty> 

current stack: "<Empty> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: ;

current stack: "<Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: }
<Statement List>' => <Empty> 

current stack: "<Empty> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
current stack: "} <Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: }

current stack: "<Function Definitions>' % % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: %
<Function Definitions>' => <Empty> 

current stack: "<Empty> % % <Opt Declaration List> <Statement List> $ "
current stack: "% % <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: %

current stack: "% <Opt Declaration List> <Statement List> $ "
token: SEPARATOR ,      lexeme: %

current stack: "<Opt Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Opt Declaration List> => <Declaration List> 

current stack: "<Declaration List> <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Declaration List> => <Declaration> ; <Declaration List>' 

current stack: "<Declaration> ; <Declaration List>' <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Declaration> => <Qualifier> <IDs> 

current stack: "<Qualifier> <IDs> ; <Declaration List>' <Statement List> $ "
token: KEYWORD ,      lexeme: int
<Qualifier> => int 

current stack: "int <IDs> ; <Declaration List>' <Statement List> $ "
token: KEYWORD ,      lexeme: int

current stack: "<IDs> ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: low
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: low

current stack: "<IDs>' ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

current stack: ", <IDs> ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,

current stack: "<IDs> ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: high
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: high

current stack: "<IDs>' ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

current stack: ", <IDs> ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ,

current stack: "<IDs> ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: step$
<IDs> => IDENTIFIER <IDs>' 

current stack: "IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ "
token: IDENTIFIER ,      lexeme: step$

current stack: "<IDs>' ; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ;
<IDs>' => <Empty> 

current stack: "<Empty> ; <Declaration List>' <Statement List> $ "
current stack: "; <Declaration List>' <Statement List> $ "
token: SEPARATOR ,      lexeme: ;

current stack: "<Declaration List>' <Statement List> $ "
token: END_INPUT ,      lexeme: $
ERROR
