parsing file: input_01.txt...

current stack: <Rat23S> $ 
current token: KEYWORD ,      lexeme: function
production used: <Rat23S> => <Opt Function Definitions> % % <Opt Declaration List> <Statement List> 

current stack: <Opt Function Definitions> % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Opt Function Definitions> => <Function Definitions> 

current stack: <Function Definitions> % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function Definitions> => <Function> <Function Definitions>' 

current stack: <Function> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function> => function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> 

current stack: function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
terminal matched: "function" = "function" -> popping "function" from stack

current stack: IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: convert$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: [
terminal matched: "[" = "[" -> popping "[" from stack

current stack: <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Opt Parameter List> => <Parameter List> 

current stack: <Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Parameter List> => <Parameter> <Parameter List>' 

current stack: <Parameter> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Parameter> => <IDs> : <Qualifier> 

current stack: <IDs> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
production used: <IDs>' => <Empty> 

current stack: <Empty> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
terminal matched: ":" = ":" -> popping ":" from stack

current stack: <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Qualifier> => int 

current stack: int <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
terminal matched: "int" = "int" -> popping "int" from stack

current stack: <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
production used: <Parameter List>' => <Empty> 

current stack: <Empty> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
terminal matched: "]" = "]" -> popping "]" from stack

current stack: <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Opt Declaration List> => <Empty> 

current stack: <Empty> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Body> => { <Statement List> } 

current stack: { <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

current stack: <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

current stack: <Statement> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

current stack: <Return> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

current stack: return <Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

current stack: <Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Return>' => <Expression> ; 

current stack: <Expression> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Primary> => INTEGER 

current stack: INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: *
production used: <Term>' => * <Factor> <Term>' 

current stack: * <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: *
terminal matched: "*" = "*" -> popping "*" from stack

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
production used: <Primary> => ( <Expression> ) 

current stack: ( <Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

current stack: <Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Primary>' => <Empty> 

current stack: <Empty> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Expression>' => - <Term> <Expression>' 

current stack: - <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
terminal matched: "-" = "-" -> popping "-" from stack

current stack: <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Primary> => INTEGER 

current stack: INTEGER <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

current stack: <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

current stack: <Empty> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: /
production used: <Term>' => / <Factor> <Term>' 

current stack: / <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: /
terminal matched: "/" = "/" -> popping "/" from stack

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
production used: <Primary> => INTEGER 

current stack: INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

current stack: <Empty> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

current stack: <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

current stack: <Empty> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

current stack: <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int

no production found: "<Function Definitions>'" => "int" ...
