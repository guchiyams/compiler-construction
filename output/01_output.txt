parsing input...

token: KEYWORD ,      lexeme: function
<Rat23S> => <Opt Function Definitions> % % <Opt Declaration List> <Statement List> 

token: KEYWORD ,      lexeme: function
<Opt Function Definitions> => <Function Definitions> 

token: KEYWORD ,      lexeme: function
<Function Definitions> => <Function> <Function Definitions>' 

token: KEYWORD ,      lexeme: function
<Function> => function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> 

token: KEYWORD ,      lexeme: function

token: IDENTIFIER ,      lexeme: convert$

token: SEPARATOR ,      lexeme: [

token: IDENTIFIER ,      lexeme: fahr
<Opt Parameter List> => <Parameter List> 

token: IDENTIFIER ,      lexeme: fahr
<Parameter List> => <Parameter> <Parameter List>' 

token: IDENTIFIER ,      lexeme: fahr
<Parameter> => <IDs> : <Qualifier> 

token: IDENTIFIER ,      lexeme: fahr
<IDs> => IDENTIFIER <IDs>' 

token: IDENTIFIER ,      lexeme: fahr

token: SEPARATOR ,      lexeme: :
<IDs>' => <Empty> 

token: SEPARATOR ,      lexeme: :

token: KEYWORD ,      lexeme: int
<Qualifier> => int 

token: KEYWORD ,      lexeme: int

token: SEPARATOR ,      lexeme: ]
<Parameter List>' => <Empty> 

token: SEPARATOR ,      lexeme: ]

token: SEPARATOR ,      lexeme: {
<Opt Declaration List> => <Empty> 

token: SEPARATOR ,      lexeme: {
<Body> => { <Statement List> } 

token: SEPARATOR ,      lexeme: {

token: KEYWORD ,      lexeme: return
<Statement List> => <Statement> <Statement List>' 

token: KEYWORD ,      lexeme: return
<Statement> => <Return> 

token: KEYWORD ,      lexeme: return
<Return> => return <Return>' 

token: KEYWORD ,      lexeme: return

token: INTEGER ,      lexeme: 5
<Return>' => <Expression> ; 

token: INTEGER ,      lexeme: 5
<Expression> => <Term> <Expression>' 

token: INTEGER ,      lexeme: 5
<Term> => <Factor> <Term>' 

token: INTEGER ,      lexeme: 5
<Factor> => <Primary> 

token: INTEGER ,      lexeme: 5
<Primary> => INTEGER 

token: INTEGER ,      lexeme: 5

token: OPERATOR ,      lexeme: *
<Term>' => * <Factor> <Term>' 

token: OPERATOR ,      lexeme: *

token: SEPARATOR ,      lexeme: (
<Factor> => <Primary> 

token: SEPARATOR ,      lexeme: (
<Primary> => ( <Expression> ) 

token: SEPARATOR ,      lexeme: (

token: IDENTIFIER ,      lexeme: fahr
<Expression> => <Term> <Expression>' 

token: IDENTIFIER ,      lexeme: fahr
<Term> => <Factor> <Term>' 

token: IDENTIFIER ,      lexeme: fahr
<Factor> => <Primary> 

token: IDENTIFIER ,      lexeme: fahr
<Primary> => IDENTIFIER <Primary>' 

token: IDENTIFIER ,      lexeme: fahr

token: OPERATOR ,      lexeme: -
<Primary>' => <Empty> 

token: OPERATOR ,      lexeme: -
<Term>' => <Empty> 

token: OPERATOR ,      lexeme: -
<Expression>' => - <Term> <Expression>' 

token: OPERATOR ,      lexeme: -

token: INTEGER ,      lexeme: 32
<Term> => <Factor> <Term>' 

token: INTEGER ,      lexeme: 32
<Factor> => <Primary> 

token: INTEGER ,      lexeme: 32
<Primary> => INTEGER 

token: INTEGER ,      lexeme: 32

token: SEPARATOR ,      lexeme: )
<Term>' => <Empty> 

token: SEPARATOR ,      lexeme: )
<Expression>' => <Empty> 

token: SEPARATOR ,      lexeme: )

token: OPERATOR ,      lexeme: /
<Term>' => / <Factor> <Term>' 

token: OPERATOR ,      lexeme: /

token: INTEGER ,      lexeme: 9
<Factor> => <Primary> 

token: INTEGER ,      lexeme: 9
<Primary> => INTEGER 

token: INTEGER ,      lexeme: 9

token: SEPARATOR ,      lexeme: ;
<Term>' => <Empty> 

token: SEPARATOR ,      lexeme: ;
<Expression>' => <Empty> 

token: SEPARATOR ,      lexeme: ;

token: SEPARATOR ,      lexeme: }
<Statement List>' => <Empty> 

token: SEPARATOR ,      lexeme: }

token: SEPARATOR ,      lexeme: %
<Function Definitions>' => <Empty> 

token: SEPARATOR ,      lexeme: %

token: SEPARATOR ,      lexeme: %

token: KEYWORD ,      lexeme: int
<Opt Declaration List> => <Declaration List> 

token: KEYWORD ,      lexeme: int
<Declaration List> => <Declaration> ; <Declaration List>' 

token: KEYWORD ,      lexeme: int
<Declaration> => <Qualifier> <IDs> 

token: KEYWORD ,      lexeme: int
<Qualifier> => int 

token: KEYWORD ,      lexeme: int

token: IDENTIFIER ,      lexeme: low
<IDs> => IDENTIFIER <IDs>' 

token: IDENTIFIER ,      lexeme: low

token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

token: SEPARATOR ,      lexeme: ,

token: IDENTIFIER ,      lexeme: high
<IDs> => IDENTIFIER <IDs>' 

token: IDENTIFIER ,      lexeme: high

token: SEPARATOR ,      lexeme: ,
<IDs>' => , <IDs> 

token: SEPARATOR ,      lexeme: ,

token: IDENTIFIER ,      lexeme: step$
<IDs> => IDENTIFIER <IDs>' 

token: IDENTIFIER ,      lexeme: step$

token: SEPARATOR ,      lexeme: ;
<IDs>' => <Empty> 

token: SEPARATOR ,      lexeme: ;

token: END_INPUT ,      lexeme: $
ERROR
