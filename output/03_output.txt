parsing file: input_03.txt...

current stack: <Rat23S> $ 
current token: KEYWORD ,      lexeme: function
production used: <Rat23S> => <Opt Function Definitions> % % <Opt Declaration List> <Statement List> 

current stack: <Opt Function Definitions> % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Opt Function Definitions> => <Function Definitions> 

current stack: <Function Definitions> % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function Definitions> => <Function> <Function Definitions>' 

current stack: <Function> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function> => function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> 

current stack: function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
terminal matched: "function" = "function" -> popping "function" from stack

current stack: IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: convert$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: [
terminal matched: "[" = "[" -> popping "[" from stack

current stack: <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Opt Parameter List> => <Parameter List> 

current stack: <Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Parameter List> => <Parameter> <Parameter List>' 

current stack: <Parameter> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Parameter> => <IDs> : <Qualifier> 

current stack: <IDs> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
production used: <IDs>' => <Empty> 

current stack: <Empty> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
terminal matched: ":" = ":" -> popping ":" from stack

current stack: <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Qualifier> => int 

current stack: int <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
terminal matched: "int" = "int" -> popping "int" from stack

current stack: <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
production used: <Parameter List>' => <Empty> 

current stack: <Empty> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
terminal matched: "]" = "]" -> popping "]" from stack

current stack: <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Opt Declaration List> => <Empty> 

current stack: <Empty> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Body> => { <Statement List> } 

current stack: { <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

current stack: <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

current stack: <Statement> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

current stack: <Return> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

current stack: return <Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

current stack: <Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Return>' => <Expression> ; 

current stack: <Expression> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Primary> => INTEGER 

current stack: INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: *
production used: <Term>' => * <Factor> <Term>' 

current stack: * <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: *
terminal matched: "*" = "*" -> popping "*" from stack

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
production used: <Primary> => ( <Expression> ) 

current stack: ( <Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

current stack: <Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Primary>' => <Empty> 

current stack: <Empty> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Expression>' => - <Term> <Expression>' 

current stack: - <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
terminal matched: "-" = "-" -> popping "-" from stack

current stack: <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Primary> => INTEGER 

current stack: INTEGER <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

current stack: <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

current stack: <Empty> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: /
production used: <Term>' => / <Factor> <Term>' 

current stack: / <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: /
terminal matched: "/" = "/" -> popping "/" from stack

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
production used: <Primary> => INTEGER 

current stack: INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

current stack: <Empty> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

current stack: <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

current stack: <Empty> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

current stack: <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: %
production used: <Function Definitions>' => <Empty> 

current stack: <Empty> % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: %
terminal matched: "%" = "%" -> popping "%" from stack

current stack: % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: %
terminal matched: "%" = "%" -> popping "%" from stack

current stack: <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Opt Declaration List> => <Declaration List> 

current stack: <Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Declaration List> => <Declaration> ; <Declaration List>' 

current stack: <Declaration> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Declaration> => <Qualifier> <IDs> 

current stack: <Qualifier> <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Qualifier> => int 

current stack: int <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: int
terminal matched: "int" = "int" -> popping "int" from stack

current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: low
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

current stack: , <IDs> ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: high
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: high
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

current stack: , <IDs> ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: step$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <IDs>' => <Empty> 

current stack: <Empty> ; <Declaration List>' <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

current stack: <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: get
production used: <Declaration List>' => <Empty> 

current stack: <Empty> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Statement List> $ 
current token: KEYWORD ,      lexeme: get
production used: <Statement List> => <Statement> <Statement List>' 

current stack: <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: get
production used: <Statement> => <Scan> 

current stack: <Scan> <Statement List>' $ 
current token: KEYWORD ,      lexeme: get
production used: <Scan> => get ( <IDs> ) ; 

current stack: get ( <IDs> ) ; <Statement List>' $ 
current token: KEYWORD ,      lexeme: get
terminal matched: "get" = "get" -> popping "get" from stack

current stack: ( <IDs> ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

current stack: <IDs> ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

current stack: , <IDs> ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

current stack: <IDs> ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

current stack: , <IDs> ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

current stack: <IDs> ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <IDs>' => <Empty> 

current stack: <Empty> ) ; <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

current stack: ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

current stack: <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
production used: <Statement List>' => <Statement List> 

current stack: <Statement List> $ 
current token: KEYWORD ,      lexeme: while
production used: <Statement List> => <Statement> <Statement List>' 

current stack: <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
production used: <Statement> => <While> 

current stack: <While> <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
production used: <While> => while ( <Condition> ) <Statement> 

current stack: while ( <Condition> ) <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
terminal matched: "while" = "while" -> popping "while" from stack

current stack: ( <Condition> ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

current stack: <Condition> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Condition> => <Expression> <Relop> <Expression> 

current stack: <Expression> <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Primary>' => <Empty> 

current stack: <Empty> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Expression>' => <Empty> 

current stack: <Empty> <Relop> <Expression> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Relop> => < 

current stack: < <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
terminal matched: "<" = "<" -> popping "<" from stack

current stack: <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Primary>' => <Empty> 

current stack: <Empty> <Term>' <Expression>' ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

current stack: <Empty> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

current stack: <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Statement> => <Compound> 

current stack: <Compound> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Compound> => { <Statement List> } 

current stack: { <Statement List> } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

current stack: <Statement List> } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement List> => <Statement> <Statement List>' 

current stack: <Statement> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement> => <Print> 

current stack: <Print> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Print> => put ( <Expression> ) ; 

current stack: put ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
terminal matched: "put" = "put" -> popping "put" from stack

current stack: ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

current stack: <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Primary>' => <Empty> 

current stack: <Empty> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

current stack: <Empty> ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

current stack: ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

current stack: <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement List>' => <Statement List> 

current stack: <Statement List> } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement List> => <Statement> <Statement List>' 

current stack: <Statement> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement> => <Print> 

current stack: <Print> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Print> => put ( <Expression> ) ; 

current stack: put ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
terminal matched: "put" = "put" -> popping "put" from stack

current stack: ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

current stack: <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
production used: <Primary>' => ( <IDs> ) 

current stack: ( <IDs> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

current stack: <IDs> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <IDs> => IDENTIFIER <IDs>' 

current stack: IDENTIFIER <IDs>' ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <IDs>' ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <IDs>' => <Empty> 

current stack: <Empty> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

current stack: <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

current stack: <Empty> ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

current stack: ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

current stack: <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Statement List>' => <Statement List> 

current stack: <Statement List> } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Statement List> => <Statement> <Statement List>' 

current stack: <Statement> <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Statement> => <Assign> 

current stack: <Assign> <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Assign> => IDENTIFIER = <Expression> ; 

current stack: IDENTIFIER = <Expression> ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: = <Expression> ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: =
terminal matched: "=" = "=" -> popping "=" from stack

current stack: <Expression> ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

current stack: <Term> <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
production used: <Primary>' => <Empty> 

current stack: <Empty> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
production used: <Expression>' => + <Term> <Expression>' 

current stack: + <Term> <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
terminal matched: "+" = "+" -> popping "+" from stack

current stack: <Term> <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <Term> => <Factor> <Term>' 

current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <Factor> => <Primary> 

current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <Primary> => IDENTIFIER <Primary>' 

current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

current stack: <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Primary>' => <Empty> 

current stack: <Empty> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

current stack: <Empty> <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

current stack: <Empty> ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

current stack: <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

current stack: <Empty> } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

current stack: } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

current stack: <Statement List>' $ 
current token: END_INPUT ,      lexeme: $
production used: <Statement List>' => <Empty> 

current stack: <Empty> $ 
epsilon found -> popping "<Empty>" from stack

current stack: $ 
current token: END_INPUT ,      lexeme: $
terminal matched: "$" = "$" -> popping "$" from stack

successfully parsed input. input is valid.
