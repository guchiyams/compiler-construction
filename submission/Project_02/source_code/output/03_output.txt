parsing file: input_03.txt...

transition number: [ 0 ]
current stack: <Rat23S> $ 
current token: KEYWORD ,      lexeme: function
production used: <Rat23S> => <Opt Function Definitions> % % <Opt Declaration List> <Statement List> 

transition number: [ 1 ]
current stack: <Opt Function Definitions> % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Opt Function Definitions> => <Function Definitions> 

transition number: [ 2 ]
current stack: <Function Definitions> % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function Definitions> => <Function> <Function Definitions>' 

transition number: [ 3 ]
current stack: <Function> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function> => function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> 

transition number: [ 4 ]
current stack: function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
terminal matched: "function" = "function" -> popping "function" from stack

transition number: [ 5 ]
current stack: IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: convert$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 6 ]
current stack: [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: [
terminal matched: "[" = "[" -> popping "[" from stack

transition number: [ 7 ]
current stack: <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Opt Parameter List> => <Parameter List> 

transition number: [ 8 ]
current stack: <Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Parameter List> => <Parameter> <Parameter List>' 

transition number: [ 9 ]
current stack: <Parameter> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Parameter> => <IDs> : <Qualifier> 

transition number: [ 10 ]
current stack: <IDs> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 11 ]
current stack: IDENTIFIER <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 12 ]
current stack: <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
production used: <IDs>' => <Empty> 

transition number: [ 13 ]
current stack: <Empty> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 14 ]
current stack: : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
terminal matched: ":" = ":" -> popping ":" from stack

transition number: [ 15 ]
current stack: <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Qualifier> => int 

transition number: [ 16 ]
current stack: int <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
terminal matched: "int" = "int" -> popping "int" from stack

transition number: [ 17 ]
current stack: <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
production used: <Parameter List>' => <Empty> 

transition number: [ 18 ]
current stack: <Empty> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 19 ]
current stack: ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
terminal matched: "]" = "]" -> popping "]" from stack

transition number: [ 20 ]
current stack: <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Opt Declaration List> => <Empty> 

transition number: [ 21 ]
current stack: <Empty> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 22 ]
current stack: <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Body> => { <Statement List> } 

transition number: [ 23 ]
current stack: { <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

transition number: [ 24 ]
current stack: <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 25 ]
current stack: <Statement> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

transition number: [ 26 ]
current stack: <Return> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

transition number: [ 27 ]
current stack: return <Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

transition number: [ 28 ]
current stack: <Return>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Return>' => <Expression> ; 

transition number: [ 29 ]
current stack: <Expression> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Expression> => <Term> <Expression>' 

transition number: [ 30 ]
current stack: <Term> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Term> => <Factor> <Term>' 

transition number: [ 31 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Factor> => <Primary> 

transition number: [ 32 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
production used: <Primary> => INTEGER 

transition number: [ 33 ]
current stack: INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 5
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

transition number: [ 34 ]
current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: *
production used: <Term>' => * <Factor> <Term>' 

transition number: [ 35 ]
current stack: * <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: *
terminal matched: "*" = "*" -> popping "*" from stack

transition number: [ 36 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
production used: <Factor> => <Primary> 

transition number: [ 37 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
production used: <Primary> => ( <Expression> ) 

transition number: [ 38 ]
current stack: ( <Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 39 ]
current stack: <Expression> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Expression> => <Term> <Expression>' 

transition number: [ 40 ]
current stack: <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Term> => <Factor> <Term>' 

transition number: [ 41 ]
current stack: <Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Factor> => <Primary> 

transition number: [ 42 ]
current stack: <Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 43 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 44 ]
current stack: <Primary>' <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Primary>' => <Empty> 

transition number: [ 45 ]
current stack: <Empty> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 46 ]
current stack: <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Term>' => <Empty> 

transition number: [ 47 ]
current stack: <Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 48 ]
current stack: <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
production used: <Expression>' => - <Term> <Expression>' 

transition number: [ 49 ]
current stack: - <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: -
terminal matched: "-" = "-" -> popping "-" from stack

transition number: [ 50 ]
current stack: <Term> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Term> => <Factor> <Term>' 

transition number: [ 51 ]
current stack: <Factor> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Factor> => <Primary> 

transition number: [ 52 ]
current stack: <Primary> <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
production used: <Primary> => INTEGER 

transition number: [ 53 ]
current stack: INTEGER <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 32
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

transition number: [ 54 ]
current stack: <Term>' <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

transition number: [ 55 ]
current stack: <Empty> <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 56 ]
current stack: <Expression>' ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

transition number: [ 57 ]
current stack: <Empty> ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 58 ]
current stack: ) <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 59 ]
current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: /
production used: <Term>' => / <Factor> <Term>' 

transition number: [ 60 ]
current stack: / <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: /
terminal matched: "/" = "/" -> popping "/" from stack

transition number: [ 61 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
production used: <Factor> => <Primary> 

transition number: [ 62 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
production used: <Primary> => INTEGER 

transition number: [ 63 ]
current stack: INTEGER <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: INTEGER ,      lexeme: 9
terminal matched: "INTEGER" = "INTEGER" -> popping "INTEGER" from stack

transition number: [ 64 ]
current stack: <Term>' <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

transition number: [ 65 ]
current stack: <Empty> <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 66 ]
current stack: <Expression>' ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

transition number: [ 67 ]
current stack: <Empty> ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 68 ]
current stack: ; <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 69 ]
current stack: <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

transition number: [ 70 ]
current stack: <Empty> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 71 ]
current stack: } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

transition number: [ 72 ]
current stack: <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function Definitions>' => <Function Definitions> 

transition number: [ 73 ]
current stack: <Function Definitions> % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function Definitions> => <Function> <Function Definitions>' 

transition number: [ 74 ]
current stack: <Function> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
production used: <Function> => function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> 

transition number: [ 75 ]
current stack: function IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: function
terminal matched: "function" = "function" -> popping "function" from stack

transition number: [ 76 ]
current stack: IDENTIFIER [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: gethigher
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 77 ]
current stack: [ <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: [
terminal matched: "[" = "[" -> popping "[" from stack

transition number: [ 78 ]
current stack: <Opt Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Opt Parameter List> => <Parameter List> 

transition number: [ 79 ]
current stack: <Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Parameter List> => <Parameter> <Parameter List>' 

transition number: [ 80 ]
current stack: <Parameter> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Parameter> => <IDs> : <Qualifier> 

transition number: [ 81 ]
current stack: <IDs> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 82 ]
current stack: IDENTIFIER <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 83 ]
current stack: <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
production used: <IDs>' => <Empty> 

transition number: [ 84 ]
current stack: <Empty> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 85 ]
current stack: : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
terminal matched: ":" = ":" -> popping ":" from stack

transition number: [ 86 ]
current stack: <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Qualifier> => int 

transition number: [ 87 ]
current stack: int <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
terminal matched: "int" = "int" -> popping "int" from stack

transition number: [ 88 ]
current stack: <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <Parameter List>' => , <Parameter List> 

transition number: [ 89 ]
current stack: , <Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 90 ]
current stack: <Parameter List> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Parameter List> => <Parameter> <Parameter List>' 

transition number: [ 91 ]
current stack: <Parameter> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Parameter> => <IDs> : <Qualifier> 

transition number: [ 92 ]
current stack: <IDs> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 93 ]
current stack: IDENTIFIER <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 94 ]
current stack: <IDs>' : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
production used: <IDs>' => <Empty> 

transition number: [ 95 ]
current stack: <Empty> : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 96 ]
current stack: : <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: :
terminal matched: ":" = ":" -> popping ":" from stack

transition number: [ 97 ]
current stack: <Qualifier> <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Qualifier> => int 

transition number: [ 98 ]
current stack: int <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
terminal matched: "int" = "int" -> popping "int" from stack

transition number: [ 99 ]
current stack: <Parameter List>' ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
production used: <Parameter List>' => <Empty> 

transition number: [ 100 ]
current stack: <Empty> ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 101 ]
current stack: ] <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ]
terminal matched: "]" = "]" -> popping "]" from stack

transition number: [ 102 ]
current stack: <Opt Declaration List> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Opt Declaration List> => <Empty> 

transition number: [ 103 ]
current stack: <Empty> <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 104 ]
current stack: <Body> <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Body> => { <Statement List> } 

transition number: [ 105 ]
current stack: { <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

transition number: [ 106 ]
current stack: <Statement List> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: if
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 107 ]
current stack: <Statement> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: if
production used: <Statement> => <If> 

transition number: [ 108 ]
current stack: <If> <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: if
production used: <If> => if ( <Condition> ) <Statement> <If>' 

transition number: [ 109 ]
current stack: if ( <Condition> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: if
terminal matched: "if" = "if" -> popping "if" from stack

transition number: [ 110 ]
current stack: ( <Condition> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 111 ]
current stack: <Condition> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Condition> => <Expression> <Relop> <Expression> 

transition number: [ 112 ]
current stack: <Expression> <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Expression> => <Term> <Expression>' 

transition number: [ 113 ]
current stack: <Term> <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Term> => <Factor> <Term>' 

transition number: [ 114 ]
current stack: <Factor> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Factor> => <Primary> 

transition number: [ 115 ]
current stack: <Primary> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 116 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 117 ]
current stack: <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: >
production used: <Primary>' => <Empty> 

transition number: [ 118 ]
current stack: <Empty> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 119 ]
current stack: <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: >
production used: <Term>' => <Empty> 

transition number: [ 120 ]
current stack: <Empty> <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 121 ]
current stack: <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: >
production used: <Expression>' => <Empty> 

transition number: [ 122 ]
current stack: <Empty> <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 123 ]
current stack: <Relop> <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: >
production used: <Relop> => > 

transition number: [ 124 ]
current stack: > <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: OPERATOR ,      lexeme: >
terminal matched: ">" = ">" -> popping ">" from stack

transition number: [ 125 ]
current stack: <Expression> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Expression> => <Term> <Expression>' 

transition number: [ 126 ]
current stack: <Term> <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Term> => <Factor> <Term>' 

transition number: [ 127 ]
current stack: <Factor> <Term>' <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Factor> => <Primary> 

transition number: [ 128 ]
current stack: <Primary> <Term>' <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 129 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 130 ]
current stack: <Primary>' <Term>' <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Primary>' => <Empty> 

transition number: [ 131 ]
current stack: <Empty> <Term>' <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 132 ]
current stack: <Term>' <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

transition number: [ 133 ]
current stack: <Empty> <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 134 ]
current stack: <Expression>' ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

transition number: [ 135 ]
current stack: <Empty> ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 136 ]
current stack: ) <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 137 ]
current stack: <Statement> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Statement> => <Compound> 

transition number: [ 138 ]
current stack: <Compound> <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Compound> => { <Statement List> } 

transition number: [ 139 ]
current stack: { <Statement List> } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

transition number: [ 140 ]
current stack: <Statement List> } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 141 ]
current stack: <Statement> <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

transition number: [ 142 ]
current stack: <Return> <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

transition number: [ 143 ]
current stack: return <Return>' <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

transition number: [ 144 ]
current stack: <Return>' <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Return>' => <Expression> ; 

transition number: [ 145 ]
current stack: <Expression> ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Expression> => <Term> <Expression>' 

transition number: [ 146 ]
current stack: <Term> <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Term> => <Factor> <Term>' 

transition number: [ 147 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Factor> => <Primary> 

transition number: [ 148 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 149 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_one
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 150 ]
current stack: <Primary>' <Term>' <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Primary>' => <Empty> 

transition number: [ 151 ]
current stack: <Empty> <Term>' <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 152 ]
current stack: <Term>' <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

transition number: [ 153 ]
current stack: <Empty> <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 154 ]
current stack: <Expression>' ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

transition number: [ 155 ]
current stack: <Empty> ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 156 ]
current stack: ; <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 157 ]
current stack: <Statement List>' } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

transition number: [ 158 ]
current stack: <Empty> } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 159 ]
current stack: } <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

transition number: [ 160 ]
current stack: <If>' <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: else
production used: <If>' => else <Statement> endif 

transition number: [ 161 ]
current stack: else <Statement> endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: else
terminal matched: "else" = "else" -> popping "else" from stack

transition number: [ 162 ]
current stack: <Statement> endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Statement> => <Compound> 

transition number: [ 163 ]
current stack: <Compound> endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
production used: <Compound> => { <Statement List> } 

transition number: [ 164 ]
current stack: { <Statement List> } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

transition number: [ 165 ]
current stack: <Statement List> } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 166 ]
current stack: <Statement> <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

transition number: [ 167 ]
current stack: <Return> <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

transition number: [ 168 ]
current stack: return <Return>' <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

transition number: [ 169 ]
current stack: <Return>' <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Return>' => <Expression> ; 

transition number: [ 170 ]
current stack: <Expression> ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Expression> => <Term> <Expression>' 

transition number: [ 171 ]
current stack: <Term> <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Term> => <Factor> <Term>' 

transition number: [ 172 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Factor> => <Primary> 

transition number: [ 173 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 174 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: IDENTIFIER ,      lexeme: fahr_two
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 175 ]
current stack: <Primary>' <Term>' <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Primary>' => <Empty> 

transition number: [ 176 ]
current stack: <Empty> <Term>' <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 177 ]
current stack: <Term>' <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

transition number: [ 178 ]
current stack: <Empty> <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 179 ]
current stack: <Expression>' ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

transition number: [ 180 ]
current stack: <Empty> ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 181 ]
current stack: ; <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 182 ]
current stack: <Statement List>' } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

transition number: [ 183 ]
current stack: <Empty> } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 184 ]
current stack: } endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

transition number: [ 185 ]
current stack: endif <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: endif
terminal matched: "endif" = "endif" -> popping "endif" from stack

transition number: [ 186 ]
current stack: <Statement List>' } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

transition number: [ 187 ]
current stack: <Empty> } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 188 ]
current stack: } <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

transition number: [ 189 ]
current stack: <Function Definitions>' % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: %
production used: <Function Definitions>' => <Empty> 

transition number: [ 190 ]
current stack: <Empty> % % <Opt Declaration List> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 191 ]
current stack: % % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: %
terminal matched: "%" = "%" -> popping "%" from stack

transition number: [ 192 ]
current stack: % <Opt Declaration List> <Statement List> $ 
current token: SEPARATOR ,      lexeme: %
terminal matched: "%" = "%" -> popping "%" from stack

transition number: [ 193 ]
current stack: <Opt Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Opt Declaration List> => <Declaration List> 

transition number: [ 194 ]
current stack: <Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Declaration List> => <Declaration> ; <Declaration List>' 

transition number: [ 195 ]
current stack: <Declaration> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Declaration> => <Qualifier> <IDs> 

transition number: [ 196 ]
current stack: <Qualifier> <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: int
production used: <Qualifier> => int 

transition number: [ 197 ]
current stack: int <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: int
terminal matched: "int" = "int" -> popping "int" from stack

transition number: [ 198 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: low
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 199 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 200 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

transition number: [ 201 ]
current stack: , <IDs> ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 202 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: high
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 203 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: high
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 204 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

transition number: [ 205 ]
current stack: , <IDs> ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 206 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 207 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: step$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 208 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <IDs>' => <Empty> 

transition number: [ 209 ]
current stack: <Empty> ; <Declaration List>' <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 210 ]
current stack: ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 211 ]
current stack: <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: real
production used: <Declaration List>' => <Declaration List> 

transition number: [ 212 ]
current stack: <Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: real
production used: <Declaration List> => <Declaration> ; <Declaration List>' 

transition number: [ 213 ]
current stack: <Declaration> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: real
production used: <Declaration> => <Qualifier> <IDs> 

transition number: [ 214 ]
current stack: <Qualifier> <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: real
production used: <Qualifier> => real 

transition number: [ 215 ]
current stack: real <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: real
terminal matched: "real" = "real" -> popping "real" from stack

transition number: [ 216 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: lower
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 217 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: lower
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 218 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

transition number: [ 219 ]
current stack: , <IDs> ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 220 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: higher
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 221 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: higher
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 222 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

transition number: [ 223 ]
current stack: , <IDs> ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 224 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: steps$
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 225 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: steps$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 226 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <IDs>' => <Empty> 

transition number: [ 227 ]
current stack: <Empty> ; <Declaration List>' <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 228 ]
current stack: ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 229 ]
current stack: <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: boolean
production used: <Declaration List>' => <Declaration List> 

transition number: [ 230 ]
current stack: <Declaration List> <Statement List> $ 
current token: KEYWORD ,      lexeme: boolean
production used: <Declaration List> => <Declaration> ; <Declaration List>' 

transition number: [ 231 ]
current stack: <Declaration> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: boolean
production used: <Declaration> => <Qualifier> <IDs> 

transition number: [ 232 ]
current stack: <Qualifier> <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: boolean
production used: <Qualifier> => boolean 

transition number: [ 233 ]
current stack: boolean <IDs> ; <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: boolean
terminal matched: "boolean" = "boolean" -> popping "boolean" from stack

transition number: [ 234 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: islower
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 235 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: islower
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 236 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

transition number: [ 237 ]
current stack: , <IDs> ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 238 ]
current stack: <IDs> ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: ishigher
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 239 ]
current stack: IDENTIFIER <IDs>' ; <Declaration List>' <Statement List> $ 
current token: IDENTIFIER ,      lexeme: ishigher
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 240 ]
current stack: <IDs>' ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
production used: <IDs>' => <Empty> 

transition number: [ 241 ]
current stack: <Empty> ; <Declaration List>' <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 242 ]
current stack: ; <Declaration List>' <Statement List> $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 243 ]
current stack: <Declaration List>' <Statement List> $ 
current token: KEYWORD ,      lexeme: get
production used: <Declaration List>' => <Empty> 

transition number: [ 244 ]
current stack: <Empty> <Statement List> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 245 ]
current stack: <Statement List> $ 
current token: KEYWORD ,      lexeme: get
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 246 ]
current stack: <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: get
production used: <Statement> => <Scan> 

transition number: [ 247 ]
current stack: <Scan> <Statement List>' $ 
current token: KEYWORD ,      lexeme: get
production used: <Scan> => get ( <IDs> ) ; 

transition number: [ 248 ]
current stack: get ( <IDs> ) ; <Statement List>' $ 
current token: KEYWORD ,      lexeme: get
terminal matched: "get" = "get" -> popping "get" from stack

transition number: [ 249 ]
current stack: ( <IDs> ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 250 ]
current stack: <IDs> ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 251 ]
current stack: IDENTIFIER <IDs>' ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 252 ]
current stack: <IDs>' ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

transition number: [ 253 ]
current stack: , <IDs> ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 254 ]
current stack: <IDs> ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 255 ]
current stack: IDENTIFIER <IDs>' ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 256 ]
current stack: <IDs>' ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
production used: <IDs>' => , <IDs> 

transition number: [ 257 ]
current stack: , <IDs> ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ,
terminal matched: "," = "," -> popping "," from stack

transition number: [ 258 ]
current stack: <IDs> ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 259 ]
current stack: IDENTIFIER <IDs>' ) ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 260 ]
current stack: <IDs>' ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <IDs>' => <Empty> 

transition number: [ 261 ]
current stack: <Empty> ) ; <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 262 ]
current stack: ) ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 263 ]
current stack: ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 264 ]
current stack: <Statement List>' $ 
current token: KEYWORD ,      lexeme: if
production used: <Statement List>' => <Statement List> 

transition number: [ 265 ]
current stack: <Statement List> $ 
current token: KEYWORD ,      lexeme: if
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 266 ]
current stack: <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: if
production used: <Statement> => <If> 

transition number: [ 267 ]
current stack: <If> <Statement List>' $ 
current token: KEYWORD ,      lexeme: if
production used: <If> => if ( <Condition> ) <Statement> <If>' 

transition number: [ 268 ]
current stack: if ( <Condition> ) <Statement> <If>' <Statement List>' $ 
current token: KEYWORD ,      lexeme: if
terminal matched: "if" = "if" -> popping "if" from stack

transition number: [ 269 ]
current stack: ( <Condition> ) <Statement> <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 270 ]
current stack: <Condition> ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Condition> => <Expression> <Relop> <Expression> 

transition number: [ 271 ]
current stack: <Expression> <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

transition number: [ 272 ]
current stack: <Term> <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

transition number: [ 273 ]
current stack: <Factor> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

transition number: [ 274 ]
current stack: <Primary> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 275 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 276 ]
current stack: <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: OPERATOR ,      lexeme: =>
production used: <Primary>' => <Empty> 

transition number: [ 277 ]
current stack: <Empty> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 278 ]
current stack: <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: OPERATOR ,      lexeme: =>
production used: <Term>' => <Empty> 

transition number: [ 279 ]
current stack: <Empty> <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 280 ]
current stack: <Expression>' <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: OPERATOR ,      lexeme: =>
production used: <Expression>' => <Empty> 

transition number: [ 281 ]
current stack: <Empty> <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 282 ]
current stack: <Relop> <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: OPERATOR ,      lexeme: =>
production used: <Relop> => => 

transition number: [ 283 ]
current stack: => <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: OPERATOR ,      lexeme: =>
terminal matched: "=>" = "=>" -> popping "=>" from stack

transition number: [ 284 ]
current stack: <Expression> ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Expression> => <Term> <Expression>' 

transition number: [ 285 ]
current stack: <Term> <Expression>' ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Term> => <Factor> <Term>' 

transition number: [ 286 ]
current stack: <Factor> <Term>' <Expression>' ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Factor> => <Primary> 

transition number: [ 287 ]
current stack: <Primary> <Term>' <Expression>' ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 288 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Statement> <If>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 289 ]
current stack: <Primary>' <Term>' <Expression>' ) <Statement> <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Primary>' => <Empty> 

transition number: [ 290 ]
current stack: <Empty> <Term>' <Expression>' ) <Statement> <If>' <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 291 ]
current stack: <Term>' <Expression>' ) <Statement> <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

transition number: [ 292 ]
current stack: <Empty> <Expression>' ) <Statement> <If>' <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 293 ]
current stack: <Expression>' ) <Statement> <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

transition number: [ 294 ]
current stack: <Empty> ) <Statement> <If>' <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 295 ]
current stack: ) <Statement> <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 296 ]
current stack: <Statement> <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Statement> => <Compound> 

transition number: [ 297 ]
current stack: <Compound> <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Compound> => { <Statement List> } 

transition number: [ 298 ]
current stack: { <Statement List> } <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

transition number: [ 299 ]
current stack: <Statement List> } <If>' <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 300 ]
current stack: <Statement> <Statement List>' } <If>' <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

transition number: [ 301 ]
current stack: <Return> <Statement List>' } <If>' <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

transition number: [ 302 ]
current stack: return <Return>' <Statement List>' } <If>' <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

transition number: [ 303 ]
current stack: <Return>' <Statement List>' } <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Return>' => ; 

transition number: [ 304 ]
current stack: ; <Statement List>' } <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 305 ]
current stack: <Statement List>' } <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

transition number: [ 306 ]
current stack: <Empty> } <If>' <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 307 ]
current stack: } <If>' <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

transition number: [ 308 ]
current stack: <If>' <Statement List>' $ 
current token: KEYWORD ,      lexeme: else
production used: <If>' => else <Statement> endif 

transition number: [ 309 ]
current stack: else <Statement> endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: else
terminal matched: "else" = "else" -> popping "else" from stack

transition number: [ 310 ]
current stack: <Statement> endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: if
production used: <Statement> => <If> 

transition number: [ 311 ]
current stack: <If> endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: if
production used: <If> => if ( <Condition> ) <Statement> <If>' 

transition number: [ 312 ]
current stack: if ( <Condition> ) <Statement> <If>' endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: if
terminal matched: "if" = "if" -> popping "if" from stack

transition number: [ 313 ]
current stack: ( <Condition> ) <Statement> <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 314 ]
current stack: <Condition> ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: islower
production used: <Condition> => <Expression> <Relop> <Expression> 

transition number: [ 315 ]
current stack: <Expression> <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: islower
production used: <Expression> => <Term> <Expression>' 

transition number: [ 316 ]
current stack: <Term> <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: islower
production used: <Term> => <Factor> <Term>' 

transition number: [ 317 ]
current stack: <Factor> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: islower
production used: <Factor> => <Primary> 

transition number: [ 318 ]
current stack: <Primary> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: islower
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 319 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: islower
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 320 ]
current stack: <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: OPERATOR ,      lexeme: ==
production used: <Primary>' => <Empty> 

transition number: [ 321 ]
current stack: <Empty> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 322 ]
current stack: <Term>' <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: OPERATOR ,      lexeme: ==
production used: <Term>' => <Empty> 

transition number: [ 323 ]
current stack: <Empty> <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 324 ]
current stack: <Expression>' <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: OPERATOR ,      lexeme: ==
production used: <Expression>' => <Empty> 

transition number: [ 325 ]
current stack: <Empty> <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 326 ]
current stack: <Relop> <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: OPERATOR ,      lexeme: ==
production used: <Relop> => == 

transition number: [ 327 ]
current stack: == <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: OPERATOR ,      lexeme: ==
terminal matched: "==" = "==" -> popping "==" from stack

transition number: [ 328 ]
current stack: <Expression> ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: true
production used: <Expression> => <Term> <Expression>' 

transition number: [ 329 ]
current stack: <Term> <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: true
production used: <Term> => <Factor> <Term>' 

transition number: [ 330 ]
current stack: <Factor> <Term>' <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: true
production used: <Factor> => <Primary> 

transition number: [ 331 ]
current stack: <Primary> <Term>' <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: true
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 332 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: true
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 333 ]
current stack: <Primary>' <Term>' <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Primary>' => <Empty> 

transition number: [ 334 ]
current stack: <Empty> <Term>' <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 335 ]
current stack: <Term>' <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

transition number: [ 336 ]
current stack: <Empty> <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 337 ]
current stack: <Expression>' ) <Statement> <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

transition number: [ 338 ]
current stack: <Empty> ) <Statement> <If>' endif <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 339 ]
current stack: ) <Statement> <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 340 ]
current stack: <Statement> <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Statement> => <Compound> 

transition number: [ 341 ]
current stack: <Compound> <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Compound> => { <Statement List> } 

transition number: [ 342 ]
current stack: { <Statement List> } <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

transition number: [ 343 ]
current stack: <Statement List> } <If>' endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 344 ]
current stack: <Statement> <Statement List>' } <If>' endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

transition number: [ 345 ]
current stack: <Return> <Statement List>' } <If>' endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

transition number: [ 346 ]
current stack: return <Return>' <Statement List>' } <If>' endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

transition number: [ 347 ]
current stack: <Return>' <Statement List>' } <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Return>' => ; 

transition number: [ 348 ]
current stack: ; <Statement List>' } <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 349 ]
current stack: <Statement List>' } <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

transition number: [ 350 ]
current stack: <Empty> } <If>' endif <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 351 ]
current stack: } <If>' endif <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

transition number: [ 352 ]
current stack: <If>' endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: endif
production used: <If>' => endif 

transition number: [ 353 ]
current stack: endif endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: endif
terminal matched: "endif" = "endif" -> popping "endif" from stack

transition number: [ 354 ]
current stack: endif <Statement List>' $ 
current token: KEYWORD ,      lexeme: endif
terminal matched: "endif" = "endif" -> popping "endif" from stack

transition number: [ 355 ]
current stack: <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
production used: <Statement List>' => <Statement List> 

transition number: [ 356 ]
current stack: <Statement List> $ 
current token: KEYWORD ,      lexeme: while
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 357 ]
current stack: <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
production used: <Statement> => <While> 

transition number: [ 358 ]
current stack: <While> <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
production used: <While> => while ( <Condition> ) <Statement> 

transition number: [ 359 ]
current stack: while ( <Condition> ) <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: while
terminal matched: "while" = "while" -> popping "while" from stack

transition number: [ 360 ]
current stack: ( <Condition> ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 361 ]
current stack: <Condition> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Condition> => <Expression> <Relop> <Expression> 

transition number: [ 362 ]
current stack: <Expression> <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

transition number: [ 363 ]
current stack: <Term> <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

transition number: [ 364 ]
current stack: <Factor> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

transition number: [ 365 ]
current stack: <Primary> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 366 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 367 ]
current stack: <Primary>' <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Primary>' => <Empty> 

transition number: [ 368 ]
current stack: <Empty> <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 369 ]
current stack: <Term>' <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Term>' => <Empty> 

transition number: [ 370 ]
current stack: <Empty> <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 371 ]
current stack: <Expression>' <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Expression>' => <Empty> 

transition number: [ 372 ]
current stack: <Empty> <Relop> <Expression> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 373 ]
current stack: <Relop> <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
production used: <Relop> => < 

transition number: [ 374 ]
current stack: < <Expression> ) <Statement> <Statement List>' $ 
current token: OPERATOR ,      lexeme: <
terminal matched: "<" = "<" -> popping "<" from stack

transition number: [ 375 ]
current stack: <Expression> ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Expression> => <Term> <Expression>' 

transition number: [ 376 ]
current stack: <Term> <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Term> => <Factor> <Term>' 

transition number: [ 377 ]
current stack: <Factor> <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Factor> => <Primary> 

transition number: [ 378 ]
current stack: <Primary> <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 379 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: high
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 380 ]
current stack: <Primary>' <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Primary>' => <Empty> 

transition number: [ 381 ]
current stack: <Empty> <Term>' <Expression>' ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 382 ]
current stack: <Term>' <Expression>' ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

transition number: [ 383 ]
current stack: <Empty> <Expression>' ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 384 ]
current stack: <Expression>' ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

transition number: [ 385 ]
current stack: <Empty> ) <Statement> <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 386 ]
current stack: ) <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 387 ]
current stack: <Statement> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Statement> => <Compound> 

transition number: [ 388 ]
current stack: <Compound> <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
production used: <Compound> => { <Statement List> } 

transition number: [ 389 ]
current stack: { <Statement List> } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: {
terminal matched: "{" = "{" -> popping "{" from stack

transition number: [ 390 ]
current stack: <Statement List> } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 391 ]
current stack: <Statement> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement> => <Print> 

transition number: [ 392 ]
current stack: <Print> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Print> => put ( <Expression> ) ; 

transition number: [ 393 ]
current stack: put ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
terminal matched: "put" = "put" -> popping "put" from stack

transition number: [ 394 ]
current stack: ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 395 ]
current stack: <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

transition number: [ 396 ]
current stack: <Term> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

transition number: [ 397 ]
current stack: <Factor> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

transition number: [ 398 ]
current stack: <Primary> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 399 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 400 ]
current stack: <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Primary>' => <Empty> 

transition number: [ 401 ]
current stack: <Empty> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 402 ]
current stack: <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

transition number: [ 403 ]
current stack: <Empty> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 404 ]
current stack: <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

transition number: [ 405 ]
current stack: <Empty> ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 406 ]
current stack: ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 407 ]
current stack: ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 408 ]
current stack: <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement List>' => <Statement List> 

transition number: [ 409 ]
current stack: <Statement List> } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 410 ]
current stack: <Statement> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Statement> => <Print> 

transition number: [ 411 ]
current stack: <Print> <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
production used: <Print> => put ( <Expression> ) ; 

transition number: [ 412 ]
current stack: put ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: KEYWORD ,      lexeme: put
terminal matched: "put" = "put" -> popping "put" from stack

transition number: [ 413 ]
current stack: ( <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 414 ]
current stack: <Expression> ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Expression> => <Term> <Expression>' 

transition number: [ 415 ]
current stack: <Term> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Term> => <Factor> <Term>' 

transition number: [ 416 ]
current stack: <Factor> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Factor> => <Primary> 

transition number: [ 417 ]
current stack: <Primary> <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 418 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: convert$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 419 ]
current stack: <Primary>' <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
production used: <Primary>' => ( <IDs> ) 

transition number: [ 420 ]
current stack: ( <IDs> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: (
terminal matched: "(" = "(" -> popping "(" from stack

transition number: [ 421 ]
current stack: <IDs> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <IDs> => IDENTIFIER <IDs>' 

transition number: [ 422 ]
current stack: IDENTIFIER <IDs>' ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 423 ]
current stack: <IDs>' ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <IDs>' => <Empty> 

transition number: [ 424 ]
current stack: <Empty> ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 425 ]
current stack: ) <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 426 ]
current stack: <Term>' <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Term>' => <Empty> 

transition number: [ 427 ]
current stack: <Empty> <Expression>' ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 428 ]
current stack: <Expression>' ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
production used: <Expression>' => <Empty> 

transition number: [ 429 ]
current stack: <Empty> ) ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 430 ]
current stack: ) ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: )
terminal matched: ")" = ")" -> popping ")" from stack

transition number: [ 431 ]
current stack: ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 432 ]
current stack: <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Statement List>' => <Statement List> 

transition number: [ 433 ]
current stack: <Statement List> } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 434 ]
current stack: <Statement> <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Statement> => <Assign> 

transition number: [ 435 ]
current stack: <Assign> <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Assign> => IDENTIFIER = <Expression> ; 

transition number: [ 436 ]
current stack: IDENTIFIER = <Expression> ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 437 ]
current stack: = <Expression> ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: =
terminal matched: "=" = "=" -> popping "=" from stack

transition number: [ 438 ]
current stack: <Expression> ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

transition number: [ 439 ]
current stack: <Term> <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

transition number: [ 440 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

transition number: [ 441 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 442 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 443 ]
current stack: <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
production used: <Primary>' => <Empty> 

transition number: [ 444 ]
current stack: <Empty> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 445 ]
current stack: <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
production used: <Term>' => <Empty> 

transition number: [ 446 ]
current stack: <Empty> <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 447 ]
current stack: <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
production used: <Expression>' => + <Term> <Expression>' 

transition number: [ 448 ]
current stack: + <Term> <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: OPERATOR ,      lexeme: +
terminal matched: "+" = "+" -> popping "+" from stack

transition number: [ 449 ]
current stack: <Term> <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <Term> => <Factor> <Term>' 

transition number: [ 450 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <Factor> => <Primary> 

transition number: [ 451 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 452 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: step$
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 453 ]
current stack: <Primary>' <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Primary>' => <Empty> 

transition number: [ 454 ]
current stack: <Empty> <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 455 ]
current stack: <Term>' <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

transition number: [ 456 ]
current stack: <Empty> <Expression>' ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 457 ]
current stack: <Expression>' ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

transition number: [ 458 ]
current stack: <Empty> ; <Statement List>' } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 459 ]
current stack: ; <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 460 ]
current stack: <Statement List>' } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
production used: <Statement List>' => <Empty> 

transition number: [ 461 ]
current stack: <Empty> } <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 462 ]
current stack: } <Statement List>' $ 
current token: SEPARATOR ,      lexeme: }
terminal matched: "}" = "}" -> popping "}" from stack

transition number: [ 463 ]
current stack: <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List>' => <Statement List> 

transition number: [ 464 ]
current stack: <Statement List> $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement List> => <Statement> <Statement List>' 

transition number: [ 465 ]
current stack: <Statement> <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Statement> => <Return> 

transition number: [ 466 ]
current stack: <Return> <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
production used: <Return> => return <Return>' 

transition number: [ 467 ]
current stack: return <Return>' <Statement List>' $ 
current token: KEYWORD ,      lexeme: return
terminal matched: "return" = "return" -> popping "return" from stack

transition number: [ 468 ]
current stack: <Return>' <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Return>' => <Expression> ; 

transition number: [ 469 ]
current stack: <Expression> ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Expression> => <Term> <Expression>' 

transition number: [ 470 ]
current stack: <Term> <Expression>' ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Term> => <Factor> <Term>' 

transition number: [ 471 ]
current stack: <Factor> <Term>' <Expression>' ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Factor> => <Primary> 

transition number: [ 472 ]
current stack: <Primary> <Term>' <Expression>' ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
production used: <Primary> => IDENTIFIER <Primary>' 

transition number: [ 473 ]
current stack: IDENTIFIER <Primary>' <Term>' <Expression>' ; <Statement List>' $ 
current token: IDENTIFIER ,      lexeme: low
terminal matched: "IDENTIFIER" = "IDENTIFIER" -> popping "IDENTIFIER" from stack

transition number: [ 474 ]
current stack: <Primary>' <Term>' <Expression>' ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Primary>' => <Empty> 

transition number: [ 475 ]
current stack: <Empty> <Term>' <Expression>' ; <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 476 ]
current stack: <Term>' <Expression>' ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Term>' => <Empty> 

transition number: [ 477 ]
current stack: <Empty> <Expression>' ; <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 478 ]
current stack: <Expression>' ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
production used: <Expression>' => <Empty> 

transition number: [ 479 ]
current stack: <Empty> ; <Statement List>' $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 480 ]
current stack: ; <Statement List>' $ 
current token: SEPARATOR ,      lexeme: ;
terminal matched: ";" = ";" -> popping ";" from stack

transition number: [ 481 ]
current stack: <Statement List>' $ 
current token: END_INPUT ,      lexeme: $
production used: <Statement List>' => <Empty> 

transition number: [ 482 ]
current stack: <Empty> $ 
epsilon found -> popping "<Empty>" from stack

transition number: [ 483 ]
current stack: $ 
current token: END_INPUT ,      lexeme: $
terminal matched: "$" = "$" -> popping "$" from stack

successfully parsed input. input is valid.